module aes.scheduler;

import aes.common;

State[] scheduleKeys(const ubyte[] initialKey)
in {
    auto keySize = initialKey.length * 8;
    assert(keySize == 128 || keySize == 192 || keySize == 256);
}
body {
    int nk = cast(int) initialKey.length / 4; // number of 32-bit words in the key
    int nr = nk + 6; // number of rounds per block for this key size
    
    // the extended key is made up of 4-byte columns
    uint[] extendedKey = new uint[(nr + 1) * 4];
    
    // the first nk columns of the extended key are just the initial key
    for (int i = 0; i < nk; i++){
        uint col = 0;
        
        for (int j = 0; j < 4; j++)
            col |= (cast(uint) initialKey[j*nk + i]) << (3 - j)*8;
        
        extendedKey[i] = col;
    }
    
    // now we can compute the rest of the extended key
    for (int i = nk; i < extendedKey.length; i++) {
        
        uint s = extendedKey[i-1];
        
        if (i % nk == 0) {
            
            s = rotWord(s);
            s = subWord(s);
            s ^= rCon[i / nk - 1];
            
        } else if (nk == 8 && i % nk == 4) {
            // extra step for 256-bit keys
            s = subWord(s);
        }
        
        s ^= extendedKey[i - nk];
        extendedKey[i] = s;
    }
    
    // finally, transform the key schedule into a sequence of round keys
    State[] roundKeys = new State[nr + 1];
    for (int i = 0; i < nr + 1; i++)
        for (int j = 0; j < 4; j++)
            for (int k = 0; k < 4; k++)
                roundKeys[i][k][j] = (extendedKey[i*4 + j] >> (3 - k)*8) & 0xFF;
    
    return roundKeys;
}

private uint subWord(uint w)
{
    uint t;
    for (int i = 0; i < 4; i++)
        t |= sBox[(w >>> (3 - i)*8) & 0xFF] << (3 - i)*8;
    return t;
}

private uint rotWord(uint w)
{
    return (w << 8) | (w >>> 24);
}

private uint[] rCon = [
    0x01000000,
    0x02000000,
    0x04000000,
    0x08000000,
    0x10000000,
    0x20000000,
    0x40000000,
    0x80000000,
    0x1b000000,
    0x36000000
];

// a simple test of the key scheduler using a 128-bit key and 
// a 256-bit key along with their known key expansions
unittest {
    ubyte[] testKey128 = [
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
    ];
    
    State[] roundKeys128 = [
        [
            [0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00]
        ],
        [
            [0x62,0x62,0x62,0x62],
            [0x63,0x63,0x63,0x63],
            [0x63,0x63,0x63,0x63],
            [0x63,0x63,0x63,0x63]
        ],
        [
            [0x9B,0xF9,0x9B,0xF9],
            [0x98,0xFB,0x98,0xFB],
            [0x98,0xFB,0x98,0xFB],
            [0xC9,0xAA,0xC9,0xAA]
        ],
        [
            [0x90,0x69,0xF2,0x0B],
            [0x97,0x6C,0xF4,0x0F],
            [0x34,0xCF,0x57,0xAC],
            [0x50,0xFA,0x33,0x99]
        ],
        [
            [0xEE,0x87,0x75,0x7E],
            [0x06,0x6A,0x9E,0x91],
            [0xDA,0x15,0x42,0xEE],
            [0x7B,0x81,0xB2,0x2B]
        ],
        [
            [0x7F,0xF8,0x8D,0xF3],
            [0x2E,0x44,0xDA,0x4B],
            [0x2B,0x3E,0x7C,0x92],
            [0x88,0x09,0xBB,0x90]
        ],
        [
            [0xEC,0x14,0x99,0x6A],
            [0x61,0x25,0xFF,0xB4],
            [0x4B,0x75,0x09,0x9B],
            [0x85,0x8C,0x37,0xA7]
        ],
        [
            [0x21,0x35,0xAC,0xC6],
            [0x75,0x50,0xAF,0x1B],
            [0x17,0x62,0x6B,0xF0],
            [0x87,0x0B,0x3C,0x9B]
        ],
        [
            [0x0E,0x3B,0x97,0x51],
            [0xF9,0xA9,0x06,0x1D],
            [0x03,0x61,0x0A,0xFA],
            [0x33,0x38,0x04,0x9F]
        ],
        [
            [0xB1,0x8A,0x1D,0x4C],
            [0xD4,0x7D,0x7B,0x66],
            [0xD8,0xB9,0xB3,0x49],
            [0xE2,0xDA,0xDE,0x41]
        ],
        [
            [0xB4,0x3E,0x23,0x6F],
            [0xEF,0x92,0xE9,0x8F],
            [0x5B,0xE2,0x51,0x18],
            [0xCB,0x11,0xCF,0x8E]
        ]
    ];
    
    assert(scheduleKeys(testKey128) == roundKeys128);
    
    ubyte[] testKey256 = [
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    ];
    
    State[] roundKeys256 = [
        [
            [0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00]
        ],
        [
            [0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00]
        ],
        [
            [0x62,0x62,0x62,0x62],
            [0x63,0x63,0x63,0x63],
            [0x63,0x63,0x63,0x63],
            [0x63,0x63,0x63,0x63]
        ],
        [
            [0xAA,0xAA,0xAA,0xAA],
            [0xFB,0xFB,0xFB,0xFB],
            [0xFB,0xFB,0xFB,0xFB],
            [0xFB,0xFB,0xFB,0xFB]
        ],
        [
            [0x6F,0x0D,0x6F,0x0D],
            [0x6C,0x0F,0x6C,0x0F],
            [0x6C,0x0F,0x6C,0x0F],
            [0xCF,0xAC,0xCF,0xAC]
        ],
        [
            [0x7D,0xD7,0x7D,0xD7],
            [0x8D,0x76,0x8D,0x76],
            [0x8D,0x76,0x8D,0x76],
            [0x6A,0x91,0x6A,0x91]
        ],
        [
            [0x53,0x5E,0x31,0x3C],
            [0x54,0x5B,0x37,0x38],
            [0xED,0xE2,0x8E,0x81],
            [0xC1,0x6D,0xA2,0x0E]
        ],
        [
            [0x96,0x41,0x3C,0xEB],
            [0x8A,0xFC,0x71,0x07],
            [0x81,0xF7,0x7A,0x0C],
            [0xC1,0x50,0x3A,0xAB]
        ],
        [
            [0x9E,0xC0,0xF1,0xCD],
            [0xAA,0xF1,0xC6,0xFE],
            [0x8F,0x6D,0xE3,0x62],
            [0x28,0x45,0xE7,0xE9]
        ],
        [
            [0x2B,0x6A,0x56,0xBD],
            [0x31,0xCD,0xBC,0xBB],
            [0x2B,0xDC,0xA6,0xAA],
            [0xDF,0x8F,0xB5,0x1E]
        ],
        [
            [0x64,0xA4,0x55,0x98],
            [0x06,0xF7,0x31,0xCF],
            [0xFD,0x90,0x73,0x11],
            [0x52,0x17,0xF0,0x19]
        ],
        [
            [0x6D,0x07,0x51,0xEC],
            [0xBB,0x76,0xCA,0x71],
            [0xA9,0x75,0xD3,0x79],
            [0x0B,0x84,0x31,0x2F]
        ],
        [
            [0xE7,0x43,0x16,0x8E],
            [0xB0,0x47,0x76,0xB9],
            [0xE8,0x78,0x0B,0x1A],
            [0x9C,0x8B,0x7B,0x62]
        ],
        [
            [0x74,0x73,0x22,0xCE],
            [0xED,0x9B,0x51,0x20],
            [0x0B,0x7E,0xAD,0xD4],
            [0xA1,0x25,0x14,0x3B]
        ],
        [
            [0x10,0x53,0x45,0xCB],
            [0xF8,0xBF,0xC9,0x70],
            [0x0A,0x72,0x79,0x63],
            [0x17,0x9C,0xE7,0x85]
        ]
    ];
    
    assert(scheduleKeys(testKey256) == roundKeys256);
}